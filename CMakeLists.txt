cmake_minimum_required(VERSION 2.8)
project(resonant)

# set(WIN32 TRUE)
# unset(UNIX)
#set(SSE_LEVEL 2)
set(SOUND_API openal)
# set(UNIX TRUE)
# unset(WIN32)
# set(ARCHITECTURE x86)
# set(SOUND_API opensl)

include(spinner/CMakeCommon.txt require)
include(spinner/CMakeCompiler.txt require)
add_definitions(-DTOOL_PREFIX="${TOOL_PREFIX}")

if(SOUND_API STREQUAL "openal")
	message(STATUS "using OpenAL...")
	set(LIBSRC_FILE ${LIBSRC_FILE} sound_depAL.cpp)
	add_definitions(-DSOUND_HEADER="sound_depAL.hpp")
elseif(SOUND_API STREQUAL "opensl")
	message(STATUS "using OpenSL ES...")
	set(LIBSRC_FILE ${LIBSRC_FILE} sound_depSL.cpp)
	add_definitions(-DSOUND_HEADER="sound_depSL.hpp")
else()
	message(FATAL_ERROR, "unknown sound API")
endif()

include_directories(${PROJECT_SOURCE_DIR}/spinner
					${PROJECT_SOURCE_DIR}/boomstick
					${CMAKE_INSTALL_PREFIX}/include)
link_directories(${CMAKE_INSTALL_PREFIX}/lib_${TOOL_PREFIX})
if(DEFINED ARCHITECTURE)
	add_definitions(-DGL_GLEXT_PROTOTYPES -DUSE_OPENGLES2)
	include_directories(${ANDROID_NDK_ROOT}/sources/android/support/include
						${CMAKE_INSTALL_PREFIX}/include/SDL2)
elseif(${WIN32})
	execute_process(COMMAND which ${CMAKE_CXX_COMPILER} OUTPUT_VARIABLE CompilerPath)
	execute_process(COMMAND ${PROJECT_SOURCE_DIR}/getbasepath.sh ${CompilerPath} OUTPUT_VARIABLE CompilerPath)
	execute_process(COMMAND ${PROJECT_SOURCE_DIR}/getbasepath.sh ${CompilerPath} OUTPUT_VARIABLE CompilerPath)
	set(CompilerBasePath ${CompilerPath}/i686-w64-mingw32)
	include_directories(${CompilerBasePath}/include/SDL2
						${CompilerBasePath}/include/freetype2)
else()
	include_directories(/usr/local/include/SDL2
						/usr/local/include/freetype2)
endif()
set(LIBSRC_FILE ${LIBSRC_FILE} glwrapper.cpp apppath.cpp scene.cpp updator.cpp printevent.cpp camera.cpp glerror.cpp gameloop.cpp font_ft_dep.cpp ftwrap.cpp fontgen.cpp font_common.cpp gltexture.cpp sdlw_surface.cpp glresource.cpp gpu.cpp glx_parse2.cpp glx_parse.cpp glx.cpp glx_output.cpp glshader.cpp glframebuffer.cpp glformat.cpp glbuffer.cpp adaptsdl.cpp sound.cpp acommon.cpp sdlw_rwops.cpp vorbisfile.cpp looper.cpp sdltouchpad.cpp sdlmouse.cpp sdlkeyboard.cpp sdljoypad.cpp input.cpp sdlw_glctx.cpp sdlw_window.cpp sdlw.cpp sdlw_mutex.cpp sdlw_spec.cpp)
add_library(resonant STATIC ${LIBSRC_FILE})
install(TARGETS resonant ARCHIVE DESTINATION lib_${TOOL_PREFIX})

file(GLOB HEADERS "./*.hpp")
install(FILES ${HEADERS} DESTINATION include/resonant)

if(NOT DEFINED ARCHITECTURE)
	set(SRC_FILE ${SRC_FILE} main.cpp)
	if(${WIN32})
		add_definitions(-Dmain=SDL_main)
		set(LINK_LIBS resonant boomstick spinner mingw32 SDL2_image SDL2main SDL2
			freetype opengl32 OpenAL32 vorbisfile vorbis ogg boost_system boost_regex boost_serialization png z)
	else()
		set(LINK_LIBS resonant boomstick spinner SDL2_image SDL2 freetype vorbisfile ogg boost_system boost_regex boost_serialization GL openal)
	endif()
	add_executable(rse_test ${SRC_FILE})
	target_link_libraries(rse_test ${LINK_LIBS})
	install(TARGETS rse_test RUNTIME DESTINATION bin_${TOOL_PREFIX})
endif()
