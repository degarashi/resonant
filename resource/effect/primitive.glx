attribute PrimAttr {
	highp vec3 atPos : POSITION;
	mediump vec2 atTex : TEXCOORD0;
	mediump vec3 atNormal : NORMAL;
	mediump vec4 atTanC : TANGENT;
}

// ------------- Primitive -------------
varying PrimVary {
	mediump vec2 varTex;
	mediump vec3 varNormal;
	highp vec3 varPos;
	highp vec3 varLsPos;

	highp vec3 varLitPos;		// 接空間でのライト位置
	highp vec3 varEyePos;		// 接空間でのカメラ位置
}
uniform PrimUnif {
	highp mat4 sys_mTrans;
	highp mat4 sys_mWorld;
	sampler2D u_texDiffuse;
	sampler2D u_texLightDepth;
	sampler2D u_texNormal;
	highp vec3 u_lightPos;
	mediump vec3 u_lightDir;
	highp vec3 sys_vEyePos;
	highp vec2 u_depthRange;
	highp mat4 u_lightMat;
}
vertexshader(400) PrimVS() {
	vec4 v = vec4(atPos,1);
	gl_Position = v * sys_mTrans;
	v *= sys_mWorld;
	varTex = atTex;

	varNormal = normalize((vec4(atNormal, 0) * sys_mWorld).xyz);
	varPos = v.xyz;
	vec4 lv = v * u_lightMat;
	varLsPos = lv.xyw;

	// 接空間ベクトルを復元
	vec3 tanv = atTanC.xyz;
	tanv = (vec4(tanv,0) * sys_mWorld).xyz;
	vec3 binormal = normalize(cross(tanv, varNormal) * atTanC.w);
	tanv = normalize(cross(varNormal, binormal) * atTanC.w);
	// ライトを接空間へ移動
	vec3 lpos = u_lightPos - varPos;
	varLitPos = vec3(dot(lpos, tanv), dot(lpos, binormal), dot(lpos, varNormal));
	// カメラ位置を接空間へ移動
	vec3 epos = sys_vEyePos - varPos;
	varEyePos = vec3(dot(epos, tanv), dot(epos, binormal), dot(epos, varNormal));
}
code Light {
	float Linear(float v, float vmin, float vmax) {
		return (v - vmin) / (vmax - vmin);
	}
	float ClampLinear(float v, float vmin, float vmax) {
		v = min(max(v, vmin), vmax);
		return Linear(v, vmin, vmax);
	}
	vec2 CalcDepth(vec3 vpos, vec3 lpos, vec2 range) {
		float d = distance(vpos, lpos);
		d = Linear(d, range.x, range.y);
		float dx = dFdx(d);
		float dy = dFdy(d);
		float d2 = d*d + 0.25 * (dx*dx + dy*dy);
		return vec2(d, d2);
	}
	float PCF(float d, sampler2D tex, vec2 uv, float diff, float shadow_v, float light_v) {
		float td[4] = {texture2D(tex, uv+vec2(diff,diff)).x < d ? shadow_v : light_v,
						texture2D(tex, uv+vec2(diff,-diff)).x < d ? shadow_v : light_v,
						texture2D(tex, uv+vec2(-diff,diff)).x < d ? shadow_v : light_v,
						texture2D(tex, uv+vec2(-diff,-diff)).x < d ? shadow_v : light_v};
		float tdsum = td[0] + td[1] + td[2] + td[3];
		return tdsum / 4;
	}
	float VariantShadow(float d, vec2 moments, float amount) {
		float p = (d <= moments.x) ? 1 : 0;
		float variance = moments.y - (moments.x * moments.x);
		variance = max(variance, 0.001);
		float d2 = d - moments.x;
		float p_max = variance / (variance+d2*d2);
		p_max = clamp(Linear(p_max, amount, 1.0), 0, 1);

		return max(p, p_max);
	}
	vec2 CalcLight(vec3 vpos, vec3 vnormal, vec3 eyepos, vec3 litpos, float p) {
		vec3 fromEye = normalize(vpos - eyepos);
		vec3 refv = fromEye + vnormal * (-dot(vnormal, fromEye) * 2);
		vec3 toLit = normalize(litpos - vpos);
		float lit = pow(max(0, dot(toLit, refv)), p);
		float lit_d = dot(toLit, vnormal);
		return vec2(lit_d, lit);
	}
	float ClipLight(vec3 vpos, vec3 litpos, vec3 litdir) {
		vec3 toLit = normalize(litpos - vpos);
		float dt = max(0, dot(-toLit, litdir));
		return smoothstep(0.5, 1, dt);
	}
	vec3 RestoreNormalXY(in float x, in float y) {
		float len = x*x + y*y;
		return vec3(x, y, -sqrt(1 - len));
	}
}
fragmentshader(400, Light) PrimFS() {
	vec3 normal = texture2D(u_texNormal, varTex).xyz;
	normal = (normal - 0.5) * 2;
	normal = normalize(normal);
	vec2 lit = CalcLight(vec3(0), normal, varEyePos, varLitPos, 32);
	/* vec3 normal = normalize(varNormal);                                 */
	/* vec2 lit = CalcLight(varPos, normal, sys_vEyePos, u_lightPos, 32); */
	/* lit.y = 0;                                                          */

	gl_FragColor = texture2D(u_texDiffuse, varTex) * (lit.x + lit.y);
	float d = Linear(distance(varPos, u_lightPos), u_depthRange.x, u_depthRange.y);
	vec2 uv;
	uv.x = (varLsPos.x/varLsPos.z * 0.5) + 0.5;
	uv.y = (varLsPos.y/varLsPos.z * 0.5) + 0.5;
	/* d -= 3e-2; */
	/* float pcf = PCF(d, u_texLightDepth, uv, 1e-3, 0.5, 1.0); */
	/* gl_FragColor.xyz *= pcf;                                                        */
	float s = ClipLight(varPos, u_lightPos, u_lightDir);
	if(s > 0.1)
		s *= VariantShadow(d, texture2D(u_texLightDepth, uv).xy, 0.5);
	s = max(0.2, s);
	gl_FragColor.xyz *= vec3(s);
	gl_FragColor.w = 1;
}

// ------------- PrimDepth -------------
varying PrimDepthVary {
	highp vec3 varPos;
}
uniform PrimDepthUnif {
	highp mat4 sys_mTrans;
	highp mat4 sys_mWorld;
	highp vec3 u_lightPos;
	highp vec2 u_depthRange;
}
vertexshader(400) PrimDepthVS() {
	vec4 v = vec4(atPos,1);
	gl_Position = v * sys_mTrans;
	varPos = (v * sys_mWorld).xyz;
}
fragmentshader(400, Light) PrimDepthFS() {
	gl_FragColor = vec4(CalcDepth(varPos, u_lightPos, u_depthRange), 0,0);
}

// ------------- CubeDefault -------------
varying CubeVary {
	mediump vec2 varTex;
	mediump vec3 varNormal;
	highp vec3 varPos;
}
uniform CubeUnif {
	highp mat4 sys_mTrans;
	highp mat4 sys_mWorld;
	sampler2D u_texDiffuse;
	samplerCube u_texCubeDepth;
	highp vec3 u_lightPos;
	highp vec3 sys_vEyePos;
	highp vec2 u_depthRange;
}
vertexshader(400) CubeVS() {
	vec4 v = vec4(atPos,1);
	gl_Position = v * sys_mTrans;
	v *= sys_mWorld;
	varTex = atTex;

	varNormal = normalize((vec4(atNormal, 0) * sys_mWorld).xyz);
	varPos = v.xyz;
}
fragmentshader(400, Light) CubeFS() {
	vec2 lit = CalcLight(varPos, normalize(varNormal), sys_vEyePos, u_lightPos, 32);
	gl_FragColor = texture2D(u_texDiffuse, varTex) * (lit.x + lit.y);
	float d = ClampLinear(distance(varPos, u_lightPos), u_depthRange.x, u_depthRange.y);
	/* d -= 3e-3; */
	/* const float diff = 1e-3;  */
	/* const float shadow = 0.5; */
	/* float tdsum = textureCube(u_texCubeDepth, -toLit).x < d ? shadow : 1; */
	/* gl_FragColor.xyz *= tdsum; */
	vec3 tmp = normalize(varPos - u_lightPos);
	tmp.y *= -1;
	float s = VariantShadow(d, textureCube(u_texCubeDepth, tmp).xy, 0.1);
	s = max(s, 0.2);
	gl_FragColor.xyz *= vec3(s);
	gl_FragColor.w = 1;
}

// ------------- Line -------------
attribute LineAttr {
	highp vec3 atPos : POSITION;
	mediump vec3 atDir : TEXCOORD0;
	lowp vec4 atColor : COLOR;
}
varying LineVary {
	lowp vec4 varColor;
}
uniform LineUnif {
	highp mat4 sys_mTrans;
	highp float u_lineLength;
}
vertexshader(400) LineVS() {
	vec4 v = vec4(atPos,1);
	v.xyz += atDir * u_lineLength;
	v *= sys_mTrans;
	gl_Position = v;
	varColor = atColor;
}
fragmentshader(400) LineFS() {
	gl_FragColor = varColor;
}

technique Primitive {
	CullFace = true;
	FrontFace = cw;
	Blend = false;
	DepthTest = true;
	DepthMask = true;
	Attribute = PrimAttr;
	LineWidth = 1;
	pass Default {
		Varying = PrimVary;
		Uniform = PrimUnif;
		VertexShader = PrimVS();
		FragmentShader = PrimFS();
	}
	pass Depth {
		Varying = PrimDepthVary;
		Uniform = PrimDepthUnif;
		VertexShader = PrimDepthVS();
		FragmentShader = PrimDepthFS();
	}
	pass CubeDepth {
		Varying = PrimDepthVary;
		Uniform = PrimDepthUnif;
		VertexShader = PrimDepthVS();
		FragmentShader = PrimDepthFS();
	}
	pass CubeDefault {
		Varying = CubeVary;
		Uniform = CubeUnif;
		VertexShader = CubeVS();
		FragmentShader = CubeFS();
	}
	pass Line {
		Attribute = LineAttr;
		Varying = LineVary;
		Uniform = LineUnif;
		VertexShader = LineVS();
		FragmentShader = LineFS();
	}
}
