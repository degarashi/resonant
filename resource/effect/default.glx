import cube.glx;

uniform Text2DUnif {
	mat3 mText;
	float sys_fAlpha;
	float sys_fDepth;
	sampler2D sys_texDiffuse;
}
attribute TextAttr {
	highp vec2 atPos : POSITION;
	mediump vec3 atTex : TEXCOORD0;
}
varying TextVary {
	highp vec4 vrTex;
}
vertexshader(130) Text2DVS() {
	vec3 tmp = vec3(atPos.x, atPos.y, 1) * mText;
	gl_Position = vec4(tmp.x, tmp.y, sys_fDepth, 1);
	vrTex = vec4(atTex, 0);
}
fragmentshader(130) TextFS() {
	gl_FragColor = texture2D(sys_texDiffuse, vrTex.xy).xyyy;
	if(gl_FragColor.w < 0.5)
		discard;
	gl_FragColor.w *= sys_fAlpha;
}
technique Text {
	CullFace = false;
	FrontFace = cw;
	LineWidth = 5;
	Blend = true;
	DepthTest = true;
	BlendFunc = SrcAlpha InvSrcAlpha;
	StencilMask = 0x10;
	DepthMask = true;
	Attribute = TextAttr;
	Varying = TextVary;
	Uniform = Text2DUnif;

	pass Default {
		VertexShader = Text2DVS();
		FragmentShader = TextFS();
	}
}

uniform Sprite3DUnif {
	highp mat4 sys_mTrans;
	sampler2D sys_texDiffuse;
	float sys_fAlpha;
}
vertexshader(400) Sprite3DVS() {
	gl_Position = vec4(atPos, 0,1) * sys_mTrans;
	varTex = atTex;
}
attribute SpriteAttr {
	highp vec2 atPos : POSITION;
	mediump vec2 atTex : TEXCOORD0;
}
uniform SpriteUnif {
	highp mat3 sys_mTrans2d;
	sampler2D sys_texDiffuse;
	float sys_fDepth;
	float sys_fAlpha;
}
uniform RectUnif : SpriteUnif {
	vec3 sys_vColor;
}
vertexshader(400) SpriteVS() {
	gl_Position.xyz = vec3(atPos, 1) * sys_mTrans2d;
	gl_Position.z = sys_fDepth;
	gl_Position.w = 1;
	varTex = atTex;
}
fragmentshader(400) SpriteFS() {
	vec4 c = texture2D(sys_texDiffuse, varTex);
	c.w *= sys_fAlpha;
	if(c.w < 0.1)
		discard;
	gl_FragColor = c;
}
fragmentshader(400) RectFS() {
	vec4 c;
	c.xyz = sys_vColor;
	c.w = sys_fAlpha;
	if(c.w < 0.1)
		discard;
	gl_FragColor = c;
}
technique Sprite {
	CullFace = false;
	FrontFace = cw;
	Blend = true;
	BlendFunc = SrcAlpha InvSrcAlpha;
	DepthTest = true;
	DepthMask = true;
	Attribute = SpriteAttr;
	Varying = CubeVary;
	Uniform = SpriteUnif;
	pass Default {
		VertexShader = SpriteVS();
		FragmentShader = SpriteFS();
	}
	pass Rect {
		Uniform = RectUnif;
		VertexShader = SpriteVS();
		FragmentShader = RectFS();
	}
	pass Default3D {
		Uniform = Sprite3DUnif;
		VertexShader = Sprite3DVS();
		FragmentShader = SpriteFS();
	}
}
uniform PFxUnif {
	sampler2D sys_texDiffuse;
	float sys_fDepth;
	float sys_fAlpha;
}
varying PFxVary {
	mediump vec2 varTex;
}
vertexshader(400) PFxVS() {
	gl_Position.xy = atPos;
	gl_Position.z = sys_fDepth;
	gl_Position.w = 1;
	varTex = atTex;
}
fragmentshader(400) PFxFS() {
	vec4 c = texture2D(sys_texDiffuse, varTex);
	c.w = sys_fAlpha;
	gl_FragColor = c;
}

uniform GaussUnif {
	vec2 mapWidth;
	float weight[8];
}
varying GaussVary {
	mediump vec2 varTex[8];
}
vertexshader(400) Gauss_VS(vec2 ofs, vec2 initDiff, vec2 diff) {
	gl_Position.xy = atPos;
	gl_Position.z = sys_fDepth;
	gl_Position.w = 1;
	varTex[0] = atTex + ofs/mapWidth;
	vec2 cur = initDiff;
	varTex[1] = varTex[0] + cur / mapWidth;
	cur += diff;
	varTex[2] = varTex[0] + cur / mapWidth;
	cur += diff;
	varTex[3] = varTex[0] + cur / mapWidth;
	cur += diff;
	varTex[4] = varTex[0] + cur / mapWidth;
	cur += diff;
	varTex[5] = varTex[0] + cur / mapWidth;
	cur += diff;
	varTex[6] = varTex[0] + cur / mapWidth;
	cur += diff;
	varTex[7] = varTex[0] + cur / mapWidth;
}
fragmentshader(400) GaussH_FS() {
	vec4 c;
	vec2 diff = vec2(16/mapWidth.x, 0);
	c = weight[0] * texture2D(sys_texDiffuse, varTex[0]);
	c += weight[1] * (texture2D(sys_texDiffuse, varTex[1])
						+ texture2D(sys_texDiffuse, varTex[7] - diff));
	c += weight[2] * (texture2D(sys_texDiffuse, varTex[2])
						+ texture2D(sys_texDiffuse, varTex[6] - diff));
	c += weight[3] * (texture2D(sys_texDiffuse, varTex[3])
						+ texture2D(sys_texDiffuse, varTex[5] - diff));
	c += weight[4] * (texture2D(sys_texDiffuse, varTex[4])
						+ texture2D(sys_texDiffuse, varTex[4] - diff));
	c += weight[5] * (texture2D(sys_texDiffuse, varTex[5])
						+ texture2D(sys_texDiffuse, varTex[3] - diff));
	c += weight[6] * (texture2D(sys_texDiffuse, varTex[6])
						+ texture2D(sys_texDiffuse, varTex[2]));
	c += weight[7] * (texture2D(sys_texDiffuse, varTex[7])
						+ texture2D(sys_texDiffuse, varTex[1]));
	c.w = 1;
	gl_FragColor = c;
}
fragmentshader(400) GaussV_FS() {
	vec4 c;
	vec2 diff = vec2(0, 16/mapWidth.y);
	c = weight[0] * texture2D(sys_texDiffuse, varTex[0]);
	c += weight[1] * (texture2D(sys_texDiffuse, varTex[1])
						+ texture2D(sys_texDiffuse, varTex[7] - diff));
	c += weight[2] * (texture2D(sys_texDiffuse, varTex[2])
						+ texture2D(sys_texDiffuse, varTex[6] - diff));
	c += weight[3] * (texture2D(sys_texDiffuse, varTex[3])
						+ texture2D(sys_texDiffuse, varTex[5] - diff));
	c += weight[4] * (texture2D(sys_texDiffuse, varTex[4])
						+ texture2D(sys_texDiffuse, varTex[4] - diff));
	c += weight[5] * (texture2D(sys_texDiffuse, varTex[5])
						+ texture2D(sys_texDiffuse, varTex[3] - diff));
	c += weight[6] * (texture2D(sys_texDiffuse, varTex[6])
						+ texture2D(sys_texDiffuse, varTex[2] - diff));
	c += weight[7] * (texture2D(sys_texDiffuse, varTex[7])
						+ texture2D(sys_texDiffuse, varTex[1] - diff));
	c.w = 1;
	gl_FragColor = c;
}

technique PostEffect {
	CullFace = true;
	FrontFace = cw;
	Blend = true;
	BlendFunc = SrcAlpha InvSrcAlpha;
	DepthTest = false;
	DepthMask = false;
	Attribute = SpriteAttr;
	Varying = PFxVary;
	Uniform = PFxUnif;
	pass Default {
		VertexShader = PFxVS();
		FragmentShader = PFxFS();
	}
	pass GaussH {
		Uniform += GaussUnif;
		Varying = GaussVary;
		VertexShader = Gauss_VS([0.5 0.5], [0 0], [2 0]);
		FragmentShader = GaussH_FS();
	}
	pass GaussV {
		Uniform += GaussUnif;
		Varying = GaussVary;
		VertexShader = Gauss_VS([-0.5 -0.5], [0 0], [0 2]);
		FragmentShader = GaussV_FS();
	}
}
