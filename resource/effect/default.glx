import primitive.glx;
import dl_primitive.glx;

uniform Text2DUnif {
	mat3 mText;
	float u_alpha;
	float u_depth;
	sampler2D u_texDiffuse;
}
attribute TextAttr {
	highp vec2 atPos : POSITION;
	mediump vec3 atTex : TEXCOORD0;
}
varying TextVary {
	highp vec4 vrTex;
}
vertexshader(130) Text2DVS() {
	vec3 tmp = vec3(atPos.x, atPos.y, 1) * mText;
	gl_Position = vec4(tmp.x, tmp.y, u_depth, 1);
	vrTex = vec4(atTex, 0);
}
fragmentshader(130) TextFS() {
	gl_FragColor = texture2D(u_texDiffuse, vrTex.xy).xyyy;
	if(gl_FragColor.w < 0.5)
		discard;
	gl_FragColor.w *= u_alpha;
}
technique Text {
	CullFace = false;
	FrontFace = cw;
	Blend = true;
	DepthTest = false;
	DepthMask = false;
	BlendFunc = SrcAlpha InvSrcAlpha;
	StencilMask = 0x10;
	Attribute = TextAttr;
	Varying = TextVary;
	Uniform = Text2DUnif;

	pass Default {
		VertexShader = Text2DVS();
		FragmentShader = TextFS();
	}
}

uniform Sprite3DUnif {
	highp mat4 sys_mTrans;
	sampler2D u_texDiffuse;
	float u_alpha;
}
vertexshader(400) Sprite3DVS() {
	gl_Position = vec4(atPos, 0,1) * sys_mTrans;
	varTex = atTex;
}
attribute SpriteAttr {
	highp vec2 atPos : POSITION;
	mediump vec2 atTex : TEXCOORD0;
}
uniform SpriteUnif {
	highp mat3 sys_mTrans2d;
	sampler2D u_texDiffuse;
	float u_depth;
	float u_alpha;
}
uniform RectUnif : SpriteUnif {
	vec3 u_color;
}
vertexshader(400) SpriteVS() {
	gl_Position.xyz = vec3(atPos, 1) * sys_mTrans2d;
	gl_Position.z = u_depth;
	gl_Position.w = 1;
	varTex = atTex;
}
fragmentshader(400) SpriteFS() {
	vec4 c = texture2D(u_texDiffuse, varTex);
	c.w *= u_alpha;
	if(c.w < 0.1)
		discard;
	gl_FragColor = c;
}
fragmentshader(400) RectFS() {
	vec4 c;
	c.xyz = u_color;
	c.w = u_alpha;
	if(c.w < 0.1)
		discard;
	gl_FragColor = c;
}
technique Sprite {
	CullFace = false;
	FrontFace = cw;
	Blend = true;
	BlendFunc = SrcAlpha InvSrcAlpha;
	DepthTest = true;
	DepthMask = true;
	DepthFunc = LessEqual;
	Attribute = SpriteAttr;
	Varying = CubeVary;
	Uniform = SpriteUnif;
	pass Default {
		VertexShader = SpriteVS();
		FragmentShader = SpriteFS();
	}
	pass Rect {
		DepthTest = false;
		Uniform = RectUnif;
		VertexShader = SpriteVS();
		FragmentShader = RectFS();
	}
	pass Default3D {
		Uniform = Sprite3DUnif;
		VertexShader = Sprite3DVS();
		FragmentShader = SpriteFS();
	}
}
uniform PFxUnif {
	sampler2D u_texDiffuse;
	float u_depth;
	float u_alpha;
}
varying PFxVary {
	mediump vec2 varTex;
}
vertexshader(400) PFxVS() {
	gl_Position.xy = atPos;
	gl_Position.z = u_depth;
	gl_Position.w = 1;
	varTex = atTex;
}
fragmentshader(400) PFxFS() {
	vec4 c = texture2D(u_texDiffuse, varTex);
	c.w = u_alpha;
	gl_FragColor = c;
}

uniform GaussUnif {
	vec2 mapWidth;
	float weight[8];
}
uniform BilateralUnif {
	vec2 mapWidth;
	vec4 bl_weight;
	float bl_coeff;
}
varying GaussVary {
	mediump vec2 varTex[8];
}
vertexshader(400) Gauss_VS(vec2 ofs, vec2 initDiff, vec2 diff) {
	gl_Position.xy = atPos;
	gl_Position.z = u_depth;
	gl_Position.w = 1;
	varTex[0] = atTex + ofs/mapWidth;
	vec2 cur = initDiff;
	varTex[1] = varTex[0] + cur / mapWidth;
	cur += diff;
	varTex[2] = varTex[0] + cur / mapWidth;
	cur += diff;
	varTex[3] = varTex[0] + cur / mapWidth;
	cur += diff;
	varTex[4] = varTex[0] + cur / mapWidth;
	cur += diff;
	varTex[5] = varTex[0] + cur / mapWidth;
	cur += diff;
	varTex[6] = varTex[0] + cur / mapWidth;
	cur += diff;
	varTex[7] = varTex[0] + cur / mapWidth;
}
fragmentshader(400) GaussH_FS() {
	vec4 c;
	vec2 diff = vec2(15/mapWidth.x, 0);
	c = weight[0] * texture2D(u_texDiffuse, varTex[0]);
	c += weight[1] * (texture2D(u_texDiffuse, varTex[1])
						+ texture2D(u_texDiffuse, varTex[7] - diff));
	c += weight[2] * (texture2D(u_texDiffuse, varTex[2])
						+ texture2D(u_texDiffuse, varTex[6] - diff));
	c += weight[3] * (texture2D(u_texDiffuse, varTex[3])
						+ texture2D(u_texDiffuse, varTex[5] - diff));
	c += weight[4] * (texture2D(u_texDiffuse, varTex[4])
						+ texture2D(u_texDiffuse, varTex[4] - diff));
	c += weight[5] * (texture2D(u_texDiffuse, varTex[5])
						+ texture2D(u_texDiffuse, varTex[3] - diff));
	c += weight[6] * (texture2D(u_texDiffuse, varTex[6])
						+ texture2D(u_texDiffuse, varTex[2] - diff));
	c += weight[7] * (texture2D(u_texDiffuse, varTex[7])
						+ texture2D(u_texDiffuse, varTex[1] - diff));
	c.w = 1;
	gl_FragColor = c;
}
fragmentshader(400) GaussV_FS() {
	vec4 c;
	vec2 diff = vec2(0, 15/mapWidth.y);
	c = weight[0] * texture2D(u_texDiffuse, varTex[0]);
	c += weight[1] * (texture2D(u_texDiffuse, varTex[1])
						+ texture2D(u_texDiffuse, varTex[7] - diff));
	c += weight[2] * (texture2D(u_texDiffuse, varTex[2])
						+ texture2D(u_texDiffuse, varTex[6] - diff));
	c += weight[3] * (texture2D(u_texDiffuse, varTex[3])
						+ texture2D(u_texDiffuse, varTex[5] - diff));
	c += weight[4] * (texture2D(u_texDiffuse, varTex[4])
						+ texture2D(u_texDiffuse, varTex[4] - diff));
	c += weight[5] * (texture2D(u_texDiffuse, varTex[5])
						+ texture2D(u_texDiffuse, varTex[3] - diff));
	c += weight[6] * (texture2D(u_texDiffuse, varTex[6])
						+ texture2D(u_texDiffuse, varTex[2] - diff));
	c += weight[7] * (texture2D(u_texDiffuse, varTex[7])
						+ texture2D(u_texDiffuse, varTex[1] - diff));
	c.w = 1;
	gl_FragColor = c;
}

code Bilateral {
	vec4 CalcBilateral(sampler2D tex, vec2 uv[8], vec2 diff, float coeff_l, vec4 weight) {
		vec4 tC = texture2D(tex, uv[0]);
		vec4 tL[4] = vec4[](texture2D(tex, uv[4] - diff),
							texture2D(tex, uv[3] - diff),
							texture2D(tex, uv[2] - diff),
							texture2D(tex, uv[1] - diff));
		vec4 tR[4] = vec4[](texture2D(tex, uv[1]),
							texture2D(tex, uv[2]),
							texture2D(tex, uv[3]),
							texture2D(tex, uv[4]));
		vec3 dcL[4] = vec3[](tL[0].rgb - tC.rgb,
							tL[1].rgb - tC.rgb,
							tL[2].rgb - tC.rgb,
							tL[3].rgb - tC.rgb);
		vec3 dcR[4] = vec3[](tR[0].rgb - tC.rgb,
							tR[1].rgb - tC.rgb,
							tR[2].rgb - tC.rgb,
							tR[3].rgb - tC.rgb);
		vec4 lL = vec4(dot(dcL[0], dcL[0]),
							dot(dcL[1], dcL[1]),
							dot(dcL[2], dcL[2]),
							dot(dcL[3], dcL[3]));
		vec4 lR = vec4(dot(dcR[0], dcR[0]),
							dot(dcR[1], dcR[1]),
							dot(dcR[2], dcR[2]),
							dot(dcR[3], dcR[3]));

		lL = weight * exp(coeff_l * lL);
		lR = weight * exp(coeff_l * lR);

		vec4 c = tC;
		c += lL.x * tL[0] + lR.x * tR[0];
		c += lL.y * tL[1] + lR.y * tR[1];
		c += lL.z * tL[2] + lR.z * tR[2];
		c += lL.w * tL[3] + lR.w * tR[3];
		return c;
	}
}
fragmentshader(400, Bilateral) BilateralH_FS() {
	vec2 diff = vec2(9/mapWidth.x, 0);
	vec4 c = CalcBilateral(u_texDiffuse, varTex, diff, bl_coeff, bl_weight);
	gl_FragColor = c / 4;
}
fragmentshader(400, Bilateral) BilateralV_FS() {
	vec2 diff = vec2(0, 9/mapWidth.y);
	vec4 c = CalcBilateral(u_texDiffuse, varTex, diff, bl_coeff, bl_weight);
	gl_FragColor = c / c.a;
}

uniform ReductionUnif {
	sampler2D u_texDiffuse;
	vec2 mapWidth;
}
varying Reduction2Vary {
	mediump vec2 v_tex;
}
vertexshader(400) Reduction2VS() {
	gl_Position.xy = atPos;
	gl_Position.z = 0;
	gl_Position.w = 1;
	vec2 hd = 0.5/mapWidth;
	v_tex = atTex + hd;
}
fragmentshader(400) Reduction2FS() {
	gl_FragColor = texture2D(u_texDiffuse, v_tex);
}

varying Reduction4Vary {
	mediump vec2 v_tex;
}
vertexshader(400) Reduction4VS() {
	gl_Position.xy = atPos;
	gl_Position.z = 0;
	gl_Position.w = 1;
	vec2 diff = 1/mapWidth;
	v_tex = atTex;
}
code Reduction {
	vec4 SumH4(in sampler2D tex, in vec2 uv, in float d) {
		return texture2D(u_texDiffuse, uv) +
				texture2D(u_texDiffuse, uv + vec2(d,0)) +
				texture2D(u_texDiffuse, uv + vec2(d*2,0)) +
				texture2D(u_texDiffuse, uv + vec2(d*3,0));
	}
	vec4 SumV4(in sampler2D tex, in vec2 uv, in vec2 d) {
		return SumH4(tex, uv, d.x) +
				SumH4(tex, uv + vec2(0,d), d.x) +
				SumH4(tex, uv + vec2(0,d*2), d.x) +
				SumH4(tex, uv + vec2(0,d*3), d.x);
	}
	vec4 Avg4x4(in sampler2D tex, in vec2 uv, in vec2 d) {
		return SumV4(tex, uv, d) * (1.0/16);
	}
}
fragmentshader(400, Reduction) Reduction4FS() {
	vec2 base = v_tex + 0.5/mapWidth;
	vec2 p2 = 2/mapWidth;
	vec4 sum = texture2D(u_texDiffuse, base) +
				texture2D(u_texDiffuse, base + vec2(p2.x, 0)) +
				texture2D(u_texDiffuse, base + vec2(0, p2.y)) +
				texture2D(u_texDiffuse, base + p2);
	sum *= 0.25;
	gl_FragColor = sum;
}

uniform OffsetUnif {
	sampler2D	u_texAdd[3];
	float		u_alpha;
	float		u_offset;
	float		u_ratio;
}
vertexshader(400) OffsetVS() {
	gl_Position = vec4(atPos, 0, 1);
	varTex = atTex;
}
fragmentshader(400) OffsetFS(int nArray) {
	vec4 c = vec4(0);
	for(int i=0 ; i<nArray ; i++)
		c += max(vec4(0), texture2D(u_texAdd[i], varTex)-vec4(u_offset));
	c *= vec4(u_ratio);
	gl_FragColor.xyz = c.xyz;
	gl_FragColor.w = u_alpha;
}

technique PostEffect {
	CullFace = true;
	FrontFace = cw;
	Blend = true;
	BlendFunc = SrcAlpha InvSrcAlpha;
	DepthTest = false;
	DepthMask = false;
	Attribute = SpriteAttr;
	Varying = PFxVary;
	Uniform = PFxUnif;
	pass Default {
		VertexShader = PFxVS();
		FragmentShader = PFxFS();
	}
	pass GaussH {
		Uniform += GaussUnif;
		Varying = GaussVary;
		VertexShader = Gauss_VS([0 0], [1.5 0], [2 0]);
		FragmentShader = GaussH_FS();
	}
	pass GaussV {
		Uniform += GaussUnif;
		Varying = GaussVary;
		VertexShader = Gauss_VS([0 0], [0 1.5], [0 2]);
		FragmentShader = GaussV_FS();
	}
	pass BilateralH {
		Blend = false;
		Uniform += BilateralUnif;
		Varying = GaussVary;
		VertexShader = Gauss_VS([0 0], [1.5 0], [2 0]);
		FragmentShader = BilateralH_FS();
	}
	pass BilateralV {
		Blend = false;
		Uniform += BilateralUnif;
		Varying = GaussVary;
		VertexShader = Gauss_VS([0 0], [0 1.5], [0 2]);
		FragmentShader = BilateralV_FS();
	}
	pass Reduction2 {
		Blend = false;
		Uniform = ReductionUnif;
		Varying = Reduction2Vary;
		VertexShader = Reduction2VS();
		FragmentShader = Reduction2FS();
	}
	pass Reduction4 {
		Blend = false;
		Uniform = ReductionUnif;
		Varying = Reduction4Vary;
		VertexShader = Reduction4VS();
		FragmentShader = Reduction4FS();
	}
	pass OffsetAdd {
		Uniform = OffsetUnif;
		BlendFunc = One One;
		VertexShader = OffsetVS();
		FragmentShader = OffsetFS(1);
	}
	pass OffsetAdd2 {
		Uniform = OffsetUnif;
		BlendFunc = One One;
		VertexShader = OffsetVS();
		FragmentShader = OffsetFS(2);
	}
	pass OffsetAdd3 {
		Uniform = OffsetUnif;
		BlendFunc = One One;
		VertexShader = OffsetVS();
		FragmentShader = OffsetFS(3);
	}
}
