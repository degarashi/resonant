attribute CubeAttr {
	highp vec3 atPos : POSITION;
	mediump vec2 atTex : TEXCOORD0;
	mediump vec3 atNormal : NORMAL;
}
varying CubeVary {
	mediump vec2 varTex;
	mediump vec3 varNormal;
	mediump vec3 varPos;
}
uniform CubeUnif {
	highp mat4 sys_mTrans;
	highp mat4 sys_mWorld;
	sampler2D sys_texDiffuse;
	mediump vec3 m_vLightPos;
	mediump vec3 sys_vEyePos;
}
vertexshader(400) CubeVS() {
	vec4 v = vec4(atPos,1);
	gl_Position = v * sys_mTrans;
	v *= sys_mWorld;
	varTex = atTex;

	varNormal = normalize((vec4(atNormal, 0) * sys_mWorld).xyz);
	varPos = v.xyz;
}
fragmentshader(400) CubePS() {
	vec3 fromEye = normalize(varPos - sys_vEyePos);
	vec3 refv = fromEye + varNormal * (-dot(varNormal, fromEye) * 2);
	vec3 toLit = normalize(m_vLightPos - varPos);
	float lit = pow(max(0, dot(toLit, refv)),16);
	float lit_d = dot(toLit, varNormal) * 0.5 + 0.5;
	lit_d *= 0.5;
	gl_FragColor = texture2D(sys_texDiffuse, varTex) * (lit + lit_d);
	gl_FragColor.w = 1;
}
technique Cube {
	CullFace = true;
	FrontFace = cw;
	Blend = false;
	DepthTest = true;
	DepthMask = true;
	Attribute = CubeAttr;
	Varying = CubeVary;
	Uniform = CubeUnif;
	pass Default {
		VertexShader = CubeVS();
		FragmentShader = CubePS();
	}
}
