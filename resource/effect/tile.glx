import scatter.glx;
import lerp.glx;

uniform TileUnif {
	vec3 u_scale;
	vec3 u_tileoffset;
	highp mat4 sys_mViewProj;
	sampler2D u_texDiffuse;
	float u_repeat;
}
attribute TileAttrB {
	highp vec2 a_pos : POSITION;
	mediump vec2 a_tex : TEXCOORD0;
	mediump vec3 a_normal : NORMAL;
}
attribute TileAttr : TileAttrB {
	float a_height : TEXCOORD1;
}
varying TileVary {
	mediump vec3 v_normal;
	mediump vec2 v_tex;
	float v_weight;
}
vertexshader(400) TileVS() {
	vec3 pos = (vec3(a_pos.x, a_height, a_pos.y) + u_tileoffset) * u_scale;
	gl_Position = vec4(pos, 1) * sys_mViewProj;
	v_normal = a_normal;
	v_tex = a_tex * u_repeat;
}
fragmentshader(400) TileFS() {
	gl_FragColor = texture2D(u_texDiffuse, v_tex);
	vec3 nml = normalize(v_normal);
	gl_FragColor *= vec4(vec3(nml.y), 1);
}

attribute STileAttr {
	highp vec2 a_pos : POSITION;
	mediump vec2 a_tex : TEXCOORD0;
	vec3 a_height : TEXCOORD1;
	vec3 a_normalX : TEXCOORD2;
	vec3 a_normalY : TEXCOORD3;
}
uniform STileUnif : TileUnif, ScatterUnif {
	vec3 u_viewCenter;
	vec2 u_distRange;
	float u_interpolateLevel;

	vec3 sys_vEyePos;
}
varying STileVary {
	mediump vec3 v_normal;
	mediump vec2 v_tex;
	highp vec3 v_fex;
	highp vec3 v_lin;
}
vertexshader(400, Lerp, Scatter) STileVS() {
	// --------- Tile ---------
	vec3 wpos = (vec3(a_pos.x, 0, a_pos.y) + u_tileoffset) * u_scale;
	float dist = distance(u_viewCenter.xz, wpos.xz);
	float range = u_distRange.y - u_distRange.x;
	float t = clamp((dist-(u_distRange.x + range/2))/(range/2), 0, 1);
	float r = (a_height.z == u_interpolateLevel) ? 1 : 0;
	wpos = (vec3(a_pos.x, Lerp(a_height.y, a_height.x, t*r), a_pos.y) + u_tileoffset) * u_scale;
	v_normal = normalize(Lerp(a_normalY, a_normalX, t*r));
	v_tex = a_tex * u_repeat;
	gl_Position = vec4(wpos, 1) * sys_mViewProj;

	// --------- Scattering ---------
	// 太陽との角度
	float cos_theta = dot(normalize(sys_vEyePos - wpos), u_lDir);
	float eyedist = distance(sys_vEyePos, wpos);
	// 波長の4乗に反比例
	vec3 ray_c = 1 / P4(u_rayleigh);
	// 視点に入ってくるまでに減衰する光の量
	vec3 exs = exp(-(ray_c + u_mie.y) * (eyedist/u_sdDivide)); // Twilight
	v_fex = exs;
	// 散乱した光が視界に入ってくる量
	v_lin = (Rayleigh(ray_c, cos_theta) + Mie(u_mie.x, u_mie.y, cos_theta)) / (ray_c + u_mie.y) * (u_lColor * u_lPower) * (vec3(1)-exs);
}
fragmentshader(400) STileFS() {
	vec3 l0 = texture2D(u_texDiffuse, v_tex).rgb;
	gl_FragColor.xyz = l0 * dot(v_normal, -u_lDir);
	gl_FragColor.xyz *= v_fex;
	gl_FragColor.xyz += v_lin;
	gl_FragColor.w = 1;
}

attribute SViewAttr {
	vec3 a_pos : POSITION;
	vec4 a_color : COLOR;
}
uniform SViewUnif {
	mat4 sys_mTrans;
}
varying SViewVary {
	vec4 v_color;
}
vertexshader(400) SViewVS() {
	gl_Position = vec4(a_pos, 1) * sys_mTrans;
	v_color = a_color;
}
fragmentshader(400) SViewFS() {
	gl_FragColor = vec4(1);
}

attribute SkyAttr {
	vec2 a_pos : POSITION;
	vec2 a_tex : TEXCOORD0;
}
uniform SkyUnif : ScatterUnif {
	mat4 sys_mViewProj;
	mat4 sys_mViewInv;
	vec2 u_scrSize;		// 射影平面でのスクリーンサイズ比
}
varying SkyVary {
	vec2 v_scpos;
}
vertexshader(400, Scatter) SkyVS() {
	v_scpos = a_pos;
	gl_Position = vec4(a_pos, 0, 1);
}
code SkyCP {
	vec3 SkyCP(in vec3 p) {
		float t = u_sdScale.x / p.y;
		return vec3(p.x*t, p.y*u_sdScale.y, p.z*t);
	}
}
fragmentshader(400, Scatter, SkyCP) SkyFS() {
	// スクリーン位置からワールド空間での向きを計算
	vec3 vdir = normalize(vec3(v_scpos * u_scrSize, 1));
	vec3 wdir = normalize((vec4(vdir, 0) * sys_mViewInv).xyz);
	wdir.y = max(0, wdir.y);
	wdir = normalize(wdir);
	// スカイドームとの交点(視点から伸ばした直線が大気層を抜けるまでの距離)を算出
	vec3 cp = SkyCP(wdir);
	float skydist = length(cp);
	// 太陽との角度
	float cos_theta = dot(-wdir, u_lDir);
	// 波長の4乗に反比例
	vec3 ray_c = 1 / P4(u_rayleigh);
	// 視点に入ってくるまでに減衰する光の量
	vec3 exs = exp(-(ray_c + u_mie.y) * (skydist/u_sdDivide));
	// 散乱した光が視界に入ってくる量
	vec3 l_in = (Rayleigh(ray_c, cos_theta) + Mie(u_mie.x, u_mie.y, cos_theta))/(ray_c + u_mie.y) * (u_lColor * u_lPower) * (vec3(1)-exs);
	gl_FragColor.xyz = l_in;
	gl_FragColor.w = 1;
}

technique Tile {
	PolygonMode = Fill;
	CullFace = true;
	FrontFace = cw;
	Blend = false;
	DepthTest = true;
	DepthMask = true;
	DepthFunc = LessEqual;

	pass Default {
		Varying = TileVary;
		Attribute = TileAttr;
		Uniform = TileUnif;
		VertexShader = TileVS();
		FragmentShader = TileFS();
	}
	pass Shader {
		Attribute = STileAttr;
		Uniform = STileUnif;
		Varying = STileVary;
		VertexShader = STileVS();
		FragmentShader = STileFS();
	}
	pass ShaderView {
		PolygonMode = Line;
		DepthMask = false;
		CullFace = true;
		Blend = true;
		BlendFunc = SrcAlpha InvSrcAlpha;

		Attribute = SViewAttr;
		Uniform = SViewUnif;
		Varying = SViewVary;
		VertexShader = SViewVS();
		FragmentShader = SViewFS();
	}
	pass Skydome {
		CullFace = false;
		PolygonMode = Fill;
		DepthTest = false;
		DepthMask = false;
		Attribute = SkyAttr;
		Varying = SkyVary;
		Uniform = SkyUnif;
		VertexShader = SkyVS();
		FragmentShader = SkyFS();
	}
}
